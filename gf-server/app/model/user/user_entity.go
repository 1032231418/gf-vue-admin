// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package user

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
	"golang.org/x/crypto/bcrypt"
)

// Entity is the golang structure for table user.
type Entity struct {
	Id          uint        `orm:"id,primary"   json:"id"`           // 自增ID
	CreatedAt   *gtime.Time `orm:"created_at"   json:"created_at"`   // 创建时间
	UpdatedAt   *gtime.Time `orm:"updated_at"   json:"updated_at"`   // 修改时间
	DeletedAt   *gtime.Time `orm:"deleted_at"   json:"deleted_at"`   // 删除时间
	UUID        string      `orm:"uuid"         json:"uuid"`         // 用户唯一标识UUID
	Username    string      `orm:"username"     json:"username"`     // 用户登录名
	Password    string      `orm:"password"     json:"-"`     // 用户登录密码
	Nickname    string      `orm:"nickname"     json:"nickname"`     // 用户昵称
	HeaderImg   string      `orm:"header_img"   json:"header_img"`   // 用户头像
	AuthorityId string     `orm:"authority_id" json:"authority_id"` // 用户角色ID
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}

// PasswordCheck 密码检查(工具类)
func (r *Entity) CompareHashAndPassword(password string) bool {
	if err := bcrypt.CompareHashAndPassword([]byte(r.Password), []byte(password)); err != nil {
		return false
	}
	return true
}

// EncryptedPassword: 加密密码(工具类)
func (r *Entity) EncryptedPassword() (userReturn *Entity, err error) {
	if byTes, err := bcrypt.GenerateFromPassword([]byte(r.Password), bcrypt.DefaultCost); err == nil { // 加密密码
		r.Password = string(byTes)
		return r, nil
	}
	return r, err
}
