// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package admins

import (
	"database/sql"
	"gf-server/library/global"

	"golang.org/x/crypto/bcrypt"
)

var entity *Entity

// GetOne 查询单条数据
func GetOne(where ...interface{}) *Entity {
	res, err := Model.FindOne(where...)
	if err != nil {
		global.GFVA_LOG.Error("数据查询失败", err)
		return entity
	}
	return res
}

// RecordNotFound 根据条件判断数据是否存在
// 有数据返回false
// 没数据 true
func RecordNotFound(where ...interface{}) bool {
	return Model.RecordNotFound(where...)
}

func (m *arModel) RecordNotFound(where ...interface{}) bool {
	r, err := m.M.FindOne(where...)
	if r == nil && err == nil {
		return true
	}
	return false
}

// RecordNotFoundV1 根据条件判断数据是否存在
// 有数据返回false
// 没数据 true
func RecordNotFoundV1(where ...interface{}) bool {
	return Model.RecordNotFoundV1(where...)
}

func (m *arModel) RecordNotFoundV1(where ...interface{}) bool {
	r, err := m.M.FindOne(where...)
	if r == nil && err == nil {
		return true
	}
	return false
}

// RecordNotFoundV2 根据条件判断数据是否存在
// 有数据返回false
// 没数据 true
func RecordNotFoundV2(where ...interface{}) (bool, error) {
	return Model.RecordNotFoundV2(where...)
}

func (m *arModel) RecordNotFoundV2(where ...interface{}) (bool, error) {
	r, err := m.M.FindOne(where...)
	if r == nil && err == nil {
		return true, err
	}
	var entity *Entity
	if err = r.Struct(&entity); err != nil && err != sql.ErrNoRows {
		return true, err
	}
	return false, nil
}

// PasswordCheck 密码检查(工具类)
// false 校验失败
func (r *Entity) CompareHashAndPassword(password string) bool {
	if err := bcrypt.CompareHashAndPassword([]byte(r.Password), []byte(password)); err != nil {
		return false
	}
	return true
}

// EncryptedPassword: 加密密码(工具类)
func (r *Entity) EncryptedPassword() (err error) {
	if byTes, err := bcrypt.GenerateFromPassword([]byte(r.Password), bcrypt.DefaultCost); err == nil { // 加密密码
		r.Password = string(byTes)
		return nil
	}
	return err
}
